// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Twenty57.Linx.Components.Database.ExecuteStoredProcedure
{
    using System.Linq;
    using System.Collections.Generic;
    using Twenty57.Linx.Components.Database.Common;
    using Twenty57.Linx.Plugin.Common.CodeGeneration;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class ExecuteStoredProcedureX_Gen : ExecuteStoredProcedureX_GenBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\nvar procX = new Twenty57.Linx.Components.Database.ExecuteStoredProcedure.Execut" +
                    "eStoredProcedureX(\r\n\t");
            
            #line 28 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (UseTransaction) { 
            
            #line default
            #line hidden
            this.Write("\t  ");
            
            #line 29 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TransactionProperty));
            
            #line default
            #line hidden
            this.Write(".GetConnectionType()\r\n\t, ");
            
            #line 30 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TransactionProperty));
            
            #line default
            #line hidden
            this.Write(".GetDbTransaction()\r\n\t");
            
            #line 31 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t  ");
            
            #line 32 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.EnumAsString(ConnectionType)));
            
            #line default
            #line hidden
            this.Write("\r\n\t, ");
            
            #line 33 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ConnectionStringProperty));
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 34 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t, ");
            
            #line 35 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StoredProcedureProperty));
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 36 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 foreach (var nextParameter in Parameters) { 
            
            #line default
            #line hidden
            this.Write("\t, new Twenty57.Linx.Components.Database.Common.DatabaseModel.ProcedureParameterV" +
                    "alue(\r\n\t\t");
            
            #line 38 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.ToVerbatimString(nextParameter.Name)));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t, ");
            
            #line 39 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if ((nextParameter.Direction == DatabaseModel.ParameterDirection.In) || (nextParameter.Direction == DatabaseModel.ParameterDirection.InOut)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 40 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetParamName(nextParameter.DisplayPropertyName)));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 41 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(" Twenty57.Linx.Components.Database.Common.TypeHelpers.GetDefaultValue< ");
            
            #line 41 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Twenty57.Linx.Components.Database.Common.TypeHelpers.GetCodeStringForType(nextParameter.DataType.GetSystemType())));
            
            #line default
            #line hidden
            this.Write(" >() \r\n\t\t\t");
            
            #line 42 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 43 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (Twenty57.Linx.Components.Database.Common.TypeHelpers.IsList(nextParameter.DataType.GetSystemType())) { 
            
            #line default
            #line hidden
            this.Write(" .ToArray() ");
            
            #line 43 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t, ");
            
            #line 44 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.EnumAsString(nextParameter.Direction)));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t");
            
            #line 45 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (nextParameter.RequiresSize) { 
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t, ");
            
            #line 46 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nextParameter.Size ?? Twenty57.Linx.Components.Database.Common.TypeHelpers.GetEnumerationValueAttributes<Twenty57.Linx.Components.Database.Common.DatabaseModel.RequiresSize>(nextParameter.DataType)[0].DefaultColumnSize));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t");
            
            #line 47 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 48 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (nextParameter.DataType == DatabaseModel.DataType.RefCursor) { 
            
            #line default
            #line hidden
            this.Write("\t\t, isRefCursor: true\r\n\t\t");
            
            #line 50 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t)\r\n\t");
            
            #line 52 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t);\r\nprocX.LogEvent += message => ");
            
            #line 54 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FunctionContextProperty));
            
            #line default
            #line hidden
            this.Write(".Log(message);\r\n");
            
            #line 55 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 var hasResultSets = ResultSets.Length != 0; 
            
            #line default
            #line hidden
            this.Write("procX.Execute(");
            
            #line 56 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.BoolAsString(hasResultSets)));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n");
            
            #line 58 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 var outParameters = Parameters.Where(p => (p.Direction != DatabaseModel.ParameterDirection.In) && (p.DataType != DatabaseModel.DataType.RefCursor));
bool hasOutput = (outParameters.Any()) || ((hasResultSets) && (OutputOption != OutputOption.RowByRow));
if (hasOutput) { 
            
            #line default
            #line hidden
            this.Write("var output = new ");
            
            #line 61 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OutputTypeName));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 62 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if ((outParameters.Any()) && (hasResultSets)) { 
            
            #line default
            #line hidden
            this.Write("procX.ReaderClosedEvent += (sender, args) => {\r\n\tif (output.");
            
            #line 64 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OutParametersOutputPropertyName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n\t{\r\n\t\t");
            
            #line 66 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 LogFields("Output parameters: ", outParameters.Select(p => new KeyValuePair<string, string>(p.OutputPropertyName, string.Format("procX.GetParameterValue({0})", CSharpUtilities.ToVerbatimString(p.Name))))); 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t");
            
            #line 68 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 foreach (var nextParameter in outParameters) { 
            
            #line default
            #line hidden
            this.Write("\t\toutput.");
            
            #line 69 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OutParametersOutputPropertyName));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 69 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nextParameter.OutputPropertyName));
            
            #line default
            #line hidden
            this.Write(" = Twenty57.Linx.Components.Database.Common.TypeHelpers.ConvertDbValue< ");
            
            #line 69 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Twenty57.Linx.Components.Database.Common.TypeHelpers.GetCodeStringForType(nextParameter.DataType.GetSystemType())));
            
            #line default
            #line hidden
            this.Write(" >(procX.GetParameterValue(");
            
            #line 69 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.ToVerbatimString(nextParameter.Name)));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t");
            
            #line 70 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t}\r\n};\r\n");
            
            #line 73 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            
            #line 74 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 76 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (hasResultSets) { 
            
            #line default
            #line hidden
            
            #line 77 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 for (int i=0; i<ResultSets.Length; i++) { 
            
            #line default
            #line hidden
            this.Write("var createOutputRow");
            
            #line 78 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write(" = new Func<System.Data.IDataReader, ");
            
            #line 78 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RowTypeNames[i]));
            
            #line default
            #line hidden
            this.Write(" >(reader => {\r\n\t");
            
            #line 79 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 var rowFields = ResultSets[i].Fields.Where(f => !string.IsNullOrEmpty(f.OutputName));
	LogFields("Retrieved ", rowFields.Select(f => new KeyValuePair<string, string>(f.ColumnName, string.Format("reader[{0}]", CSharpUtilities.ToVerbatimString(f.ColumnName)))));
	
            
            #line default
            #line hidden
            this.Write("\treturn new ");
            
            #line 82 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RowTypeNames[i]));
            
            #line default
            #line hidden
            this.Write(" {\r\n\t\t");
            
            #line 83 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 foreach (var nextField in rowFields) { 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 84 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nextField.OutputName));
            
            #line default
            #line hidden
            this.Write(" = Twenty57.Linx.Components.Database.Common.TypeHelpers.ConvertDbValue< ");
            
            #line 84 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Twenty57.Linx.Components.Database.Common.TypeHelpers.GetCodeStringForType(nextField.DataType.GetSystemType())));
            
            #line default
            #line hidden
            this.Write(" >(reader[");
            
            #line 84 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.ToVerbatimString(nextField.ColumnName)));
            
            #line default
            #line hidden
            this.Write("]), \r\n\t\t");
            
            #line 85 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t};\r\n});\r\n");
            
            #line 88 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 90 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (OutputOption == OutputOption.RowByRow) { 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 91 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ExecutionPathOutputName));
            
            #line default
            #line hidden
            this.Write(" = \r\n\t");
            
            #line 92 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 for (int i=0; i<ResultSets.Length; i++) {
	if (i != 0) Write(".Concat("); 
            
            #line default
            #line hidden
            this.Write("\tprocX.NextResultRows<Twenty57.Linx.Plugin.Common.CodeGeneration.NextResult>(read" +
                    "er => {\r\n\t\treturn new Twenty57.Linx.Plugin.Common.CodeGeneration.NextResult(");
            
            #line 95 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.ToVerbatimString(ExecutionPathNames[i])));
            
            #line default
            #line hidden
            this.Write(", createOutputRow");
            
            #line 95 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("(reader));\r\n\t})\r\n\t");
            
            #line 97 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (i != 0) Write(")"); 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 98 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 99 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } else if (OutputOption == OutputOption.ListOfRows) { 
            
            #line default
            #line hidden
            this.Write("\ttry\r\n\t{\r\n\t\t");
            
            #line 102 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 for (int i=0; i<ResultSets.Length; i++) { 
		string propertyName = "output." + ResultSetRowOutputPropertyNames[i]; 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 104 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            
            #line default
            #line hidden
            this.Write(" = new List< ");
            
            #line 104 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RowTypeNames[i]));
            
            #line default
            #line hidden
            this.Write(" >();\r\n\t\twhile (procX.Reader.Read())\r\n\t\t\t");
            
            #line 106 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyName));
            
            #line default
            #line hidden
            this.Write(".Add(createOutputRow");
            
            #line 106 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("(procX.Reader));\r\n\t\tprocX.Reader.NextResult();\r\n\t\t");
            
            #line 108 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t}\r\n\tfinally\r\n\t{\r\n\t\tprocX.Dispose();\r\n\t}\r\n");
            
            #line 114 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\ttry\r\n\t{\r\n\t\t");
            
            #line 117 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 for (int i=0; i<ResultSets.Length; i++) { 
            
            #line default
            #line hidden
            this.Write("\t\tif (procX.Reader.Read())\r\n\t\t\toutput.");
            
            #line 119 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResultSetRowOutputPropertyNames[i]));
            
            #line default
            #line hidden
            this.Write(" = createOutputRow");
            
            #line 119 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            
            #line default
            #line hidden
            this.Write("(procX.Reader);\r\n\t\telse\r\n\t\t");
            
            #line 121 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (OutputOption == OutputOption.FirstRow) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tthrow new Exception(");
            
            #line 122 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.ToVerbatimString(string.Format("No rows returned for {0}.", ResultSetRowOutputPropertyNames[i]))));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t");
            
            #line 123 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\toutput.");
            
            #line 124 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ResultSetRowOutputPropertyNames[i]));
            
            #line default
            #line hidden
            this.Write(" = new ");
            
            #line 124 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RowTypeNames[i]));
            
            #line default
            #line hidden
            this.Write("();\r\n\t\t");
            
            #line 125 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\tprocX.Reader.NextResult();\r\n\t\t");
            
            #line 127 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t}\r\n\tfinally\r\n\t{\r\n\t\tprocX.Dispose();\r\n\t}\r\n");
            
            #line 133 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            
            #line 134 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 136 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (outParameters.Any()) { 
LogFields("Output parameters: ", outParameters.Select(p => new KeyValuePair<string, string>(p.OutputPropertyName, string.Format("procX.GetParameterValue({0})", CSharpUtilities.ToVerbatimString(p.Name))))); 
            
            #line default
            #line hidden
            this.Write("\r\noutput.");
            
            #line 139 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OutParametersOutputPropertyName));
            
            #line default
            #line hidden
            this.Write(" = new ");
            
            #line 139 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OutParametersOutputTypeName));
            
            #line default
            #line hidden
            this.Write(" {\r\n\t");
            
            #line 140 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 foreach (var nextParameter in outParameters) { 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 141 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nextParameter.OutputPropertyName));
            
            #line default
            #line hidden
            this.Write(" = Twenty57.Linx.Components.Database.Common.TypeHelpers.ConvertDbValue< ");
            
            #line 141 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Twenty57.Linx.Components.Database.Common.TypeHelpers.GetCodeStringForType(nextParameter.DataType.GetSystemType())));
            
            #line default
            #line hidden
            this.Write(" >(procX.GetParameterValue(");
            
            #line 141 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.ToVerbatimString(nextParameter.Name)));
            
            #line default
            #line hidden
            this.Write(")), \r\n\t");
            
            #line 142 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("};\r\n");
            
            #line 144 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 146 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 if (hasOutput) { 
            
            #line default
            #line hidden
            this.Write("return output;\r\n");
            
            #line 148 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 150 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"

private void LogFields(string logPrefix, IEnumerable<KeyValuePair<string, string>> fields)
{
	if (fields.Any())
	{
		var logFormatString = logPrefix;
		int index = 0;
		foreach (var nextField in fields)
			logFormatString += string.Format("{0} = {{{1}}}, ", nextField.Key, index++);
		
        
        #line default
        #line hidden
        
        #line 159 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 160 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(FunctionContextProperty));

        
        #line default
        #line hidden
        
        #line 160 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
this.Write(".Log(System.String.Format(");

        
        #line default
        #line hidden
        
        #line 160 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.ToVerbatimString(logFormatString.TrimEnd(',', ' '))));

        
        #line default
        #line hidden
        
        #line 160 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
this.Write("\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 161 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 foreach (var nextField in fields) { 
        
        #line default
        #line hidden
        
        #line 161 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
this.Write("\t\t\t, Twenty57.Linx.Components.Database.Common.LogHelpers.GetDisplayString(");

        
        #line default
        #line hidden
        
        #line 162 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(nextField.Value));

        
        #line default
        #line hidden
        
        #line 162 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
this.Write(")\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 163 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 } 
        
        #line default
        #line hidden
        
        #line 163 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
this.Write("\t\t));\r\n\t");

        
        #line default
        #line hidden
        
        #line 165 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"
 }
} 
        
        #line default
        #line hidden
        
        #line 1 "D:\Hg\Linx5 Components\Database\Code\Database\ExecuteStoredProcedure\ExecuteStoredProcedureX_Gen.tt"

private string _FunctionContextPropertyField;

/// <summary>
/// Access the FunctionContextProperty parameter of the template.
/// </summary>
private string FunctionContextProperty
{
    get
    {
        return this._FunctionContextPropertyField;
    }
}

private bool _UseTransactionField;

/// <summary>
/// Access the UseTransaction parameter of the template.
/// </summary>
private bool UseTransaction
{
    get
    {
        return this._UseTransactionField;
    }
}

private string _TransactionPropertyField;

/// <summary>
/// Access the TransactionProperty parameter of the template.
/// </summary>
private string TransactionProperty
{
    get
    {
        return this._TransactionPropertyField;
    }
}

private global::Twenty57.Linx.Components.Database.Common.ConnectionType _ConnectionTypeField;

/// <summary>
/// Access the ConnectionType parameter of the template.
/// </summary>
private global::Twenty57.Linx.Components.Database.Common.ConnectionType ConnectionType
{
    get
    {
        return this._ConnectionTypeField;
    }
}

private string _ConnectionStringPropertyField;

/// <summary>
/// Access the ConnectionStringProperty parameter of the template.
/// </summary>
private string ConnectionStringProperty
{
    get
    {
        return this._ConnectionStringPropertyField;
    }
}

private string _StoredProcedurePropertyField;

/// <summary>
/// Access the StoredProcedureProperty parameter of the template.
/// </summary>
private string StoredProcedureProperty
{
    get
    {
        return this._StoredProcedurePropertyField;
    }
}

private global::Twenty57.Linx.Components.Database.Common.DatabaseModel.ProcedureParameters _ParametersField;

/// <summary>
/// Access the Parameters parameter of the template.
/// </summary>
private global::Twenty57.Linx.Components.Database.Common.DatabaseModel.ProcedureParameters Parameters
{
    get
    {
        return this._ParametersField;
    }
}

private global::System.Func<string, string> _GetParamNameField;

/// <summary>
/// Access the GetParamName parameter of the template.
/// </summary>
private global::System.Func<string, string> GetParamName
{
    get
    {
        return this._GetParamNameField;
    }
}

private string _OutputTypeNameField;

/// <summary>
/// Access the OutputTypeName parameter of the template.
/// </summary>
private string OutputTypeName
{
    get
    {
        return this._OutputTypeNameField;
    }
}

private string _OutParametersOutputPropertyNameField;

/// <summary>
/// Access the OutParametersOutputPropertyName parameter of the template.
/// </summary>
private string OutParametersOutputPropertyName
{
    get
    {
        return this._OutParametersOutputPropertyNameField;
    }
}

private string _OutParametersOutputTypeNameField;

/// <summary>
/// Access the OutParametersOutputTypeName parameter of the template.
/// </summary>
private string OutParametersOutputTypeName
{
    get
    {
        return this._OutParametersOutputTypeNameField;
    }
}

private global::Twenty57.Linx.Components.Database.ExecuteStoredProcedure.OutputOption _OutputOptionField;

/// <summary>
/// Access the OutputOption parameter of the template.
/// </summary>
private global::Twenty57.Linx.Components.Database.ExecuteStoredProcedure.OutputOption OutputOption
{
    get
    {
        return this._OutputOptionField;
    }
}

private Twenty57.Linx.Components.Database.Common.DatabaseModel.ResultSet[] _ResultSetsField;

/// <summary>
/// Access the ResultSets parameter of the template.
/// </summary>
private global::Twenty57.Linx.Components.Database.Common.DatabaseModel.ResultSet[] ResultSets
{
    get
    {
        return this._ResultSetsField;
    }
}

private string[] _RowTypeNamesField;

/// <summary>
/// Access the RowTypeNames parameter of the template.
/// </summary>
private string[] RowTypeNames
{
    get
    {
        return this._RowTypeNamesField;
    }
}

private string[] _ResultSetRowOutputPropertyNamesField;

/// <summary>
/// Access the ResultSetRowOutputPropertyNames parameter of the template.
/// </summary>
private string[] ResultSetRowOutputPropertyNames
{
    get
    {
        return this._ResultSetRowOutputPropertyNamesField;
    }
}

private string _ExecutionPathOutputNameField;

/// <summary>
/// Access the ExecutionPathOutputName parameter of the template.
/// </summary>
private string ExecutionPathOutputName
{
    get
    {
        return this._ExecutionPathOutputNameField;
    }
}

private string[] _ExecutionPathNamesField;

/// <summary>
/// Access the ExecutionPathNames parameter of the template.
/// </summary>
private string[] ExecutionPathNames
{
    get
    {
        return this._ExecutionPathNamesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool FunctionContextPropertyValueAcquired = false;
if (this.Session.ContainsKey("FunctionContextProperty"))
{
    this._FunctionContextPropertyField = ((string)(this.Session["FunctionContextProperty"]));
    FunctionContextPropertyValueAcquired = true;
}
if ((FunctionContextPropertyValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("FunctionContextProperty");
    if ((data != null))
    {
        this._FunctionContextPropertyField = ((string)(data));
    }
}
bool UseTransactionValueAcquired = false;
if (this.Session.ContainsKey("UseTransaction"))
{
    this._UseTransactionField = ((bool)(this.Session["UseTransaction"]));
    UseTransactionValueAcquired = true;
}
if ((UseTransactionValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("UseTransaction");
    if ((data != null))
    {
        this._UseTransactionField = ((bool)(data));
    }
}
bool TransactionPropertyValueAcquired = false;
if (this.Session.ContainsKey("TransactionProperty"))
{
    this._TransactionPropertyField = ((string)(this.Session["TransactionProperty"]));
    TransactionPropertyValueAcquired = true;
}
if ((TransactionPropertyValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("TransactionProperty");
    if ((data != null))
    {
        this._TransactionPropertyField = ((string)(data));
    }
}
bool ConnectionTypeValueAcquired = false;
if (this.Session.ContainsKey("ConnectionType"))
{
    this._ConnectionTypeField = ((global::Twenty57.Linx.Components.Database.Common.ConnectionType)(this.Session["ConnectionType"]));
    ConnectionTypeValueAcquired = true;
}
if ((ConnectionTypeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ConnectionType");
    if ((data != null))
    {
        this._ConnectionTypeField = ((global::Twenty57.Linx.Components.Database.Common.ConnectionType)(data));
    }
}
bool ConnectionStringPropertyValueAcquired = false;
if (this.Session.ContainsKey("ConnectionStringProperty"))
{
    this._ConnectionStringPropertyField = ((string)(this.Session["ConnectionStringProperty"]));
    ConnectionStringPropertyValueAcquired = true;
}
if ((ConnectionStringPropertyValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ConnectionStringProperty");
    if ((data != null))
    {
        this._ConnectionStringPropertyField = ((string)(data));
    }
}
bool StoredProcedurePropertyValueAcquired = false;
if (this.Session.ContainsKey("StoredProcedureProperty"))
{
    this._StoredProcedurePropertyField = ((string)(this.Session["StoredProcedureProperty"]));
    StoredProcedurePropertyValueAcquired = true;
}
if ((StoredProcedurePropertyValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("StoredProcedureProperty");
    if ((data != null))
    {
        this._StoredProcedurePropertyField = ((string)(data));
    }
}
bool ParametersValueAcquired = false;
if (this.Session.ContainsKey("Parameters"))
{
    this._ParametersField = ((global::Twenty57.Linx.Components.Database.Common.DatabaseModel.ProcedureParameters)(this.Session["Parameters"]));
    ParametersValueAcquired = true;
}
if ((ParametersValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Parameters");
    if ((data != null))
    {
        this._ParametersField = ((global::Twenty57.Linx.Components.Database.Common.DatabaseModel.ProcedureParameters)(data));
    }
}
bool GetParamNameValueAcquired = false;
if (this.Session.ContainsKey("GetParamName"))
{
    this._GetParamNameField = ((global::System.Func<string, string>)(this.Session["GetParamName"]));
    GetParamNameValueAcquired = true;
}
if ((GetParamNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("GetParamName");
    if ((data != null))
    {
        this._GetParamNameField = ((global::System.Func<string, string>)(data));
    }
}
bool OutputTypeNameValueAcquired = false;
if (this.Session.ContainsKey("OutputTypeName"))
{
    this._OutputTypeNameField = ((string)(this.Session["OutputTypeName"]));
    OutputTypeNameValueAcquired = true;
}
if ((OutputTypeNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("OutputTypeName");
    if ((data != null))
    {
        this._OutputTypeNameField = ((string)(data));
    }
}
bool OutParametersOutputPropertyNameValueAcquired = false;
if (this.Session.ContainsKey("OutParametersOutputPropertyName"))
{
    this._OutParametersOutputPropertyNameField = ((string)(this.Session["OutParametersOutputPropertyName"]));
    OutParametersOutputPropertyNameValueAcquired = true;
}
if ((OutParametersOutputPropertyNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("OutParametersOutputPropertyName");
    if ((data != null))
    {
        this._OutParametersOutputPropertyNameField = ((string)(data));
    }
}
bool OutParametersOutputTypeNameValueAcquired = false;
if (this.Session.ContainsKey("OutParametersOutputTypeName"))
{
    this._OutParametersOutputTypeNameField = ((string)(this.Session["OutParametersOutputTypeName"]));
    OutParametersOutputTypeNameValueAcquired = true;
}
if ((OutParametersOutputTypeNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("OutParametersOutputTypeName");
    if ((data != null))
    {
        this._OutParametersOutputTypeNameField = ((string)(data));
    }
}
bool OutputOptionValueAcquired = false;
if (this.Session.ContainsKey("OutputOption"))
{
    this._OutputOptionField = ((global::Twenty57.Linx.Components.Database.ExecuteStoredProcedure.OutputOption)(this.Session["OutputOption"]));
    OutputOptionValueAcquired = true;
}
if ((OutputOptionValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("OutputOption");
    if ((data != null))
    {
        this._OutputOptionField = ((global::Twenty57.Linx.Components.Database.ExecuteStoredProcedure.OutputOption)(data));
    }
}
bool ResultSetsValueAcquired = false;
if (this.Session.ContainsKey("ResultSets"))
{
    this._ResultSetsField = ((global::Twenty57.Linx.Components.Database.Common.DatabaseModel.ResultSet[])(this.Session["ResultSets"]));
    ResultSetsValueAcquired = true;
}
if ((ResultSetsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ResultSets");
    if ((data != null))
    {
        this._ResultSetsField = ((global::Twenty57.Linx.Components.Database.Common.DatabaseModel.ResultSet[])(data));
    }
}
bool RowTypeNamesValueAcquired = false;
if (this.Session.ContainsKey("RowTypeNames"))
{
    this._RowTypeNamesField = ((string[])(this.Session["RowTypeNames"]));
    RowTypeNamesValueAcquired = true;
}
if ((RowTypeNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("RowTypeNames");
    if ((data != null))
    {
        this._RowTypeNamesField = ((string[])(data));
    }
}
bool ResultSetRowOutputPropertyNamesValueAcquired = false;
if (this.Session.ContainsKey("ResultSetRowOutputPropertyNames"))
{
    this._ResultSetRowOutputPropertyNamesField = ((string[])(this.Session["ResultSetRowOutputPropertyNames"]));
    ResultSetRowOutputPropertyNamesValueAcquired = true;
}
if ((ResultSetRowOutputPropertyNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ResultSetRowOutputPropertyNames");
    if ((data != null))
    {
        this._ResultSetRowOutputPropertyNamesField = ((string[])(data));
    }
}
bool ExecutionPathOutputNameValueAcquired = false;
if (this.Session.ContainsKey("ExecutionPathOutputName"))
{
    this._ExecutionPathOutputNameField = ((string)(this.Session["ExecutionPathOutputName"]));
    ExecutionPathOutputNameValueAcquired = true;
}
if ((ExecutionPathOutputNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ExecutionPathOutputName");
    if ((data != null))
    {
        this._ExecutionPathOutputNameField = ((string)(data));
    }
}
bool ExecutionPathNamesValueAcquired = false;
if (this.Session.ContainsKey("ExecutionPathNames"))
{
    this._ExecutionPathNamesField = ((string[])(this.Session["ExecutionPathNames"]));
    ExecutionPathNamesValueAcquired = true;
}
if ((ExecutionPathNamesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ExecutionPathNames");
    if ((data != null))
    {
        this._ExecutionPathNamesField = ((string[])(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class ExecuteStoredProcedureX_GenBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
