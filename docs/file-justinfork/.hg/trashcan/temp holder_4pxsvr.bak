diff --git a/Code/File/TextFileRead/Editors/TextFileReadFieldsEditor/TextFileReadFieldsEditor.xaml b/Code/File/TextFileRead/Editors/TextFileReadFieldsEditor/TextFileReadFieldsEditor.xaml
--- a/Code/File/TextFileRead/Editors/TextFileReadFieldsEditor/TextFileReadFieldsEditor.xaml
+++ b/Code/File/TextFileRead/Editors/TextFileReadFieldsEditor/TextFileReadFieldsEditor.xaml
@@ -45,8 +45,21 @@
 				</Setter.Value>
 			</Setter>
 		</Style>
-
+		<DataTemplate x:Key="CrossCellDataTemplate">
+			<Button Command="Delete" Height="20" Width="20" Template="{StaticResource AppIcon_Delete}">
+				<Button.Style>
+					<Style TargetType="{x:Type Button}">
+						<Setter Property="Visibility" Value="Hidden" />
+						<Style.Triggers>
+							<DataTrigger Binding="{Binding Skip, Converter={StaticResource TrueConverter}}" Value="True">
+								<Setter Property="Visibility" Value="Visible" />
+							</DataTrigger>
+						</Style.Triggers>
+					</Style>
+				</Button.Style>
+			</Button>
+		</DataTemplate>
 		<Style TargetType="TextBlock" x:Key="TextBlockH2">
 			<Setter Property="FontWeight" Value="SemiBold" />
 			<Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}" />
 		</Style>
@@ -49,7 +62,19 @@
 		<Style TargetType="TextBlock" x:Key="TextBlockH2">
 			<Setter Property="FontWeight" Value="SemiBold" />
 			<Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}" />
 		</Style>
+		<Style x:Key="DataGridDataRowValidationStyle" TargetType="{x:Type DataGridRow}">
+			<Setter Property="ValidationErrorTemplate">
+				<Setter.Value>
+					<ControlTemplate>
+						<ContentControl Width="11" Height="11" Template="{StaticResource AppIcon_ValidationError}" ToolTip="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}, Path=(Validation.Errors)[0].ErrorContent}" />
+					</ControlTemplate>
+				</Setter.Value>
+			</Setter>
+		</Style>
+		<Style TargetType="DataGridRow" x:Key="DataGridRowStyle">
+			<Setter Property="ValidationErrorTemplate" Value="{x:Null}"/>
+		</Style>
 		<Style TargetType="TextBox" x:Key="ValidationTxt">
 			<Style.Triggers>
 				<Trigger Property="Validation.HasError" Value="true">
@@ -131,7 +156,7 @@
 			<RowDefinition />
 			<RowDefinition Height="Auto" />
 		</Grid.RowDefinitions>
-		<Grid>
+		<Grid Name="Roger">
 			<Grid.RowDefinitions>
 				<RowDefinition Height="Auto" />
 				<RowDefinition Height="115" />
@@ -238,7 +263,7 @@
 					</TextBox>
 				</Grid>
 			</Grid>
-			<Grid Grid.Row="2" Grid.ColumnSpan="2">
+			<Grid  Grid.Row="2" Grid.ColumnSpan="2">
 				<Grid Grid.Height="25">
 					<Grid.ColumnDefinitions>
 						<ColumnDefinition />
@@ -247,7 +272,7 @@
 					<Border Background="{StaticResource BackgroundBrush}" Margin="0 0 5 0">
 						<TextBlock Text="Define Fields" VerticalAlignment="Center" Foreground="Black" Margin="10 0 0 0"/>
 					</Border>
-					<Button Content="CLEAR FIELDS" Command="{Binding ClearFields, Mode=OneWay}" Grid.Column="1" Padding="10 0" Width="102" Height="20">
+					<Button Content="CLEAR FIELDS" Click="Button_Click" Grid.Column="1" Padding="10 0" Width="102" Height="20">
 						<Button.Style>
 							<Style TargetType="{x:Type Button}" BasedOn="{StaticResource DialogButtonStyle}">
 								<Setter Property="IsEnabled" Value="false" />
@@ -266,7 +291,7 @@
 			</Grid>
 			<DataGrid Name="DataGridFields" ItemsSource="{Binding FieldList, Mode=TwoWay}" VerticalScrollBarVisibility="Auto" CanUserDeleteRows="True" IsSynchronizedWithCurrentItem="True" CanUserAddRows="False" CanUserResizeRows="False" HorizontalAlignment="Stretch" Margin="10,5,0,5" VerticalAlignment="Stretch" AutoGenerateColumns="False" Grid.Row="3" IsManipulationEnabled="True"
 								InitializingNewItem="DataGridFields_InitializingNewItem" Loaded="DataGridFields_Loaded" PreviewKeyDown="DataGrid_PreviewKeyDown">
-				<DataGrid.Resources>
+				<!--<DataGrid.Resources>
 					<Style TargetType="{x:Type DataGridRow}">
 						<Setter Property="ValidationErrorTemplate">
 							<Setter.Value>
@@ -276,9 +301,14 @@
 							</Setter.Value>
 						</Setter>
 					</Style>
-				</DataGrid.Resources>
-				<DataGrid.Columns>
-					<DataGridTextColumn Header="Name" MinWidth="200" Width="*" Foreground="{StaticResource ForegroundDarkBrush}">
+				</DataGrid.Resources>-->
+				<!--<DataGrid.RowStyle>
+					<Style TargetType="DataGridRow">
+						<Setter Property="ValidationErrorTemplate" Value="{x:Null}"/>
+					</Style>
+				</DataGrid.RowStyle>-->
+				<!--<DataGrid.Columns>
+					--><!--<DataGridTextColumn Header="Name" MinWidth="200" Width="*" Foreground="{StaticResource ForegroundDarkBrush}">
 						<DataGridTextColumn.Binding>
 							<Binding Path="Name" Mode="TwoWay" NotifyOnValidationError="True">
 								<Binding.ValidationRules>
@@ -287,8 +317,8 @@
 								</Binding.ValidationRules>
 							</Binding>
 						</DataGridTextColumn.Binding>
-					</DataGridTextColumn>
-					<DataGridTextColumn Header="Length" MinWidth="30" Foreground="{StaticResource ForegroundDarkBrush}">
+					</DataGridTextColumn>-->
+					<!--<DataGridTextColumn Header="Length" MinWidth="30" Foreground="{StaticResource ForegroundDarkBrush}">
 						<DataGridTextColumn.Binding>
 							<Binding Path="Length" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
 								<Binding.ValidationRules>
@@ -296,8 +326,8 @@
 								</Binding.ValidationRules>
 							</Binding>
 						</DataGridTextColumn.Binding>
-					</DataGridTextColumn>
-					<DataGridComboBoxColumn Header="Type" MinWidth="50" SelectedValueBinding="{Binding Path=TypeName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
+					</DataGridTextColumn>-->
+					<!--<DataGridComboBoxColumn Header="Type" MinWidth="50" SelectedValueBinding="{Binding Path=TypeName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
 						<DataGridComboBoxColumn.ElementStyle>
 							<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
 								<Setter Property="ItemsSource" Value="{Binding Path=DataContext.TypeNameList, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
@@ -308,28 +338,12 @@
 								<Setter Property="ItemsSource" Value="{Binding Path=DataContext.TypeNameList, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
 							</Style>
 						</DataGridComboBoxColumn.EditingElementStyle>
-					</DataGridComboBoxColumn>
-					<DataGridTextColumn Binding="{Binding Path=Format}" Header="Input Format" MinWidth="200" Width="*" Foreground="{StaticResource ForegroundDarkBrush}" />
-					<DataGridCheckBoxColumn Binding="{Binding Skip}" Header="Skip" Width="Auto" />
-					<DataGridTemplateColumn IsReadOnly="True" Width="Auto">
-						<DataGridTemplateColumn.CellTemplate>
-							<DataTemplate>
-								<Button Command="Delete" Height="20" Width="20" Template="{StaticResource AppIcon_Delete}">
-									<Button.Style>
-										<Style TargetType="{x:Type Button}">
-											<Setter Property="Visibility" Value="Hidden" />
-											<Style.Triggers>
-												<DataTrigger Binding="{Binding Skip, Converter={StaticResource TrueConverter}}" Value="True">
-													<Setter Property="Visibility" Value="Visible" />
-												</DataTrigger>
-											</Style.Triggers>
-										</Style>
-									</Button.Style>
-								</Button>
-							</DataTemplate>
-						</DataGridTemplateColumn.CellTemplate>
-					</DataGridTemplateColumn>
-				</DataGrid.Columns>
+					</DataGridComboBoxColumn>-->
+					<!--<DataGridTextColumn Binding="{Binding Path=Format}" Header="Input Format" MinWidth="200" Width="*" Foreground="{StaticResource ForegroundDarkBrush}" />-->
+					<!--<DataGridCheckBoxColumn Binding="{Binding Skip}" Header="Skip" Width="Auto" />-->
+					<!--<DataGridTemplateColumn IsReadOnly="True" Width="Auto">
+					</DataGridTemplateColumn>--><!--
+				</DataGrid.Columns>-->
 			</DataGrid>
 			<Grid Grid.Row="4" Grid.ColumnSpan="2" VerticalAlignment="Stretch">
 				<Grid.RowDefinitions>
diff --git a/Code/File/TextFileRead/Editors/TextFileReadFieldsEditor/TextFileReadFieldsEditor.xaml.cs b/Code/File/TextFileRead/Editors/TextFileReadFieldsEditor/TextFileReadFieldsEditor.xaml.cs
--- a/Code/File/TextFileRead/Editors/TextFileReadFieldsEditor/TextFileReadFieldsEditor.xaml.cs
+++ b/Code/File/TextFileRead/Editors/TextFileReadFieldsEditor/TextFileReadFieldsEditor.xaml.cs
@@ -4,6 +4,7 @@
 using System.Text.RegularExpressions;
 using System.Windows;
 using System.Windows.Controls;
+using System.Windows.Data;
 using System.Windows.Input;
 using System.Windows.Media;
 using Twenty57.Linx.Components.File.TextFileRead.Editors.TextFileReadFieldsEditor.ViewModel;
@@ -16,6 +17,7 @@
 
 		private FieldsEditorViewModel context;
 
+		private DataGrid DataGridFields2 { get; set; } 
 		protected override bool PersistLayout
 		{
 			get
@@ -86,6 +88,7 @@
 			DataContext = context;
 			this.context = context;
 			AddHandler(Validation.ErrorEvent, new RoutedEventHandler(OnErrorEvent));
+			AddColumns(DataGridFields);
 			SetDelimiterEnabled(context.TextFileType == FileType.Delimited);
 		}
 
@@ -110,6 +113,7 @@
 
 		private void SetDelimiterEnabled(bool delimited)
 		{
+
 			if (delimited)
 			{
 				HeaderDelimiters.IsEnabled = true;
@@ -117,6 +121,7 @@
 				RBTab.IsEnabled = true;
 				RBOther.IsEnabled = true;
 				txtOtherDelimiter.IsEnabled = true;
+		
 				DataGridFields.Columns[1].Visibility = Visibility.Hidden;
 			}
 			else
@@ -223,6 +228,59 @@
 			dataGrid.CanUserAddRows = true;
 			dataGrid.SelectedIndex = 0;
 			dataGrid.MoveFocus(new TraversalRequest(FocusNavigationDirection.First));
+			Style validationRowStyle = (Style)FindResource("DataGridDataRowValidationStyle");
+			Style dataGridRowStyle = (Style)FindResource("DataGridRowStyle");
+			dataGrid.Resources.Add(typeof(DataGridRow), validationRowStyle);
+			dataGrid.RowStyle = dataGridRowStyle;
+		}
+
+		private void AddColumns(DataGrid datagrid)
+		{
+			
+			#region NameColumn
+			DataGridTextColumn nameColumn = new DataGridTextColumn() { Header = "Name", MinWidth = 200, Width = new DataGridLength(0, DataGridLengthUnitType.Star) };
+			Binding binding = new Binding() { Path = new PropertyPath("Name"), Mode = BindingMode.TwoWay, NotifyOnValidationError = true };
+			binding.ValidationRules.Add(new ValidFieldNameRule());
+			binding.ValidationRules.Add(new UniqueFieldNameRule());
+			nameColumn.Binding = binding;
+			datagrid.Columns.Add(nameColumn);
+			#endregion
+
+			#region LengthColumn
+			DataGridTextColumn lengthColumn = new DataGridTextColumn() { Header = "Length", MinWidth = 30, Width = new DataGridLength(0, DataGridLengthUnitType.Star) };
+			binding = new Binding() { Path = new PropertyPath("Length"), Mode = BindingMode.TwoWay, NotifyOnValidationError = true, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged };
+			binding.ValidationRules.Add(new PositiveNumericRule() { fieldName = "FieldLength" });
+			lengthColumn.Binding = binding;
+			datagrid.Columns.Add(lengthColumn);
+			#endregion
+
+			#region TypeColumn
+			DataGridComboBoxColumn typeColumn = new DataGridComboBoxColumn() { Header = "Type", MinWidth = 50, Width = new DataGridLength(0, DataGridLengthUnitType.Star) };
+			binding = new Binding() { Path = new PropertyPath("TypeName"), Mode = BindingMode.TwoWay, UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged };
+			BindingOperations.SetBinding(typeColumn, DataGridComboBoxColumn.SelectedValuePathProperty, binding);
+			datagrid.Columns.Add(typeColumn);
+			#endregion
+
+			#region InputFormatColumn
+			DataGridTextColumn inputFormatColumn = new DataGridTextColumn() { Header = "Input Format", MinWidth = 200, Width = new DataGridLength(0, DataGridLengthUnitType.Star) };
+			binding = new Binding() { Path = new PropertyPath("Format")};
+			
+			inputFormatColumn.Binding = binding;
+			datagrid.Columns.Add(inputFormatColumn);
+			#endregion
+
+			#region SkipColumn
+			DataGridCheckBoxColumn skipColumn = new DataGridCheckBoxColumn() { Header = "Skip", Width = new DataGridLength(0, DataGridLengthUnitType.Auto) };
+			binding = new Binding() { Path = new PropertyPath("Format") };
+			skipColumn.Binding = binding;
+			datagrid.Columns.Add(skipColumn);
+			#endregion
+
+			#region CrossColumn
+			DataGridTemplateColumn crossColumn = new DataGridTemplateColumn() { IsReadOnly = true, Width = new DataGridLength(0, DataGridLengthUnitType.Auto) };
+			crossColumn.CellTemplate =  (DataTemplate)FindResource("CrossCellDataTemplate");
+			datagrid.Columns.Add(crossColumn);
+			#endregion
 		}
 
 		private void DataGrid_PreviewKeyDown(object sender, KeyEventArgs e)
@@ -235,5 +293,30 @@
 				dataGrid.BeginEdit();
 			}
 		}
+
+		private void Button_Click(object sender, RoutedEventArgs e)//TODO: reconstruct;
+		{
+			Roger.Children.Remove(this.DataGridFields);
+			DataGrid datagridfields = new DataGrid() { VerticalScrollBarVisibility=ScrollBarVisibility.Auto,CanUserDeleteRows = true, IsSynchronizedWithCurrentItem=true,CanUserAddRows=false, CanUserResizeRows=false,HorizontalAlignment= HorizontalAlignment.Stretch, VerticalAlignment= VerticalAlignment.Stretch, AutoGenerateColumns = false,IsManipulationEnabled= true };
+			Binding binding = new Binding();
+			binding.Path = new PropertyPath("FieldList");
+			binding.Mode = BindingMode.TwoWay;
+			BindingOperations.SetBinding(datagridfields, DataGrid.ItemsSourceProperty, binding);
+			//datagridfields.SetBinding(DataGrid.ItemsSourceProperty, new Binding {Source = FieldsEditorViewModel.FieldList, Mode = BindingMode.TwoWay });
+			datagridfields.InitializingNewItem += DataGridFields_InitializingNewItem;
+			Loaded += DataGridFields_Loaded;
+			PreviewKeyDown += DataGrid_PreviewKeyDown;
+
+			//Style rowStyle = new Style(typeof(DataGridRow));
+			//ContentControl content = new ContentControl() { Width = 11, Height = 11 };
+
+			//Setter setter = new Setter(DataGrid.RowValidationErrorTemplateProperty, content);
+			//rowStyle.Setters.Add(setter);
+
+
+			//datagridfields.Resources.Add(typeof(DataGridRow),rowStyle);
+			Roger.Children.Add(datagridfields);
+			datagridfields.SetValue(Grid.RowProperty, 3);
+		}
 	}
 }
