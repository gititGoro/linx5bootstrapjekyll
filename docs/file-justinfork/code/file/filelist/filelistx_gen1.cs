// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Twenty57.Linx.Components.File
{
    using Twenty57.Linx.Components.File;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class FileListX_Gen : FileListX_GenBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write(" \r\n");
            this.Write(" \r\n");
            this.Write(" \r\n");
            this.Write("\r\n");
            this.Write(" \r\n");
            this.Write(" \r\n");
            this.Write(" \r\n\r\n");
            
            #line 17 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FunctionContextPropertyName));
            
            #line default
            #line hidden
            this.Write(".Log(\"Querying files in \" + ");
            
            #line 17 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FolderPath));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\nvar buildFileInfo = new System.Func<System.IO.FileInfo, ");
            
            #line 19 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileInfoTypeName));
            
            #line default
            #line hidden
            this.Write(">(file => {\r\n\t");
            
            #line 20 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FunctionContextPropertyName));
            
            #line default
            #line hidden
            this.Write(".Log(file.FullName);\r\n\r\n\treturn new ");
            
            #line 22 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileInfoTypeName));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t\t");
            
            #line 24 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileListShared.OutputFileNameName));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 24 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 if (ReturnFullPath) { 
            
            #line default
            #line hidden
            this.Write("file.FullName");
            
            #line 24 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("file.Name");
            
            #line 24 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t");
            
            #line 25 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileListShared.OutputCreationTimeName));
            
            #line default
            #line hidden
            this.Write(" = file.CreationTime,\r\n\t\t");
            
            #line 26 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileListShared.OutputLastAccessTimeName));
            
            #line default
            #line hidden
            this.Write(" = file.LastAccessTime,\r\n\t\t");
            
            #line 27 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileListShared.OutputLastWriteTimeName));
            
            #line default
            #line hidden
            this.Write(" = file.LastWriteTime,\r\n\t\t");
            
            #line 28 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileListShared.OutputSizeName));
            
            #line default
            #line hidden
            this.Write(" = file.Length,\r\n\t\t");
            
            #line 29 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileListShared.OutputReadOnlyName));
            
            #line default
            #line hidden
            this.Write(" = ((file.Attributes | System.IO.FileAttributes.ReadOnly) == file.Attributes),\r\n\t" +
                    "\t");
            
            #line 30 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileListShared.OutputHiddenName));
            
            #line default
            #line hidden
            this.Write(" = ((file.Attributes | System.IO.FileAttributes.Hidden) == file.Attributes)\r\n\t};\r" +
                    "\n});\r\n\r\nvar files = Twenty57.Linx.Components.File.FileListX\r\n\t.GetFiles(");
            
            #line 35 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IncludeSubfolders));
            
            #line default
            #line hidden
            this.Write(", \r\n\t\t");
            
            #line 36 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FolderPath));
            
            #line default
            #line hidden
            this.Write(", \r\n\t\t");
            
            #line 37 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SearchPattern));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 38 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FunctionContextPropertyName));
            
            #line default
            #line hidden
            this.Write(".Log(files.Count() + \" files found.\");\r\nvar fileInfos = files.Select(file =>\r\n\t\t");
            
            #line 40 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 if (LoopResults) { 
            
            #line default
            #line hidden
            this.Write(" new Twenty57.Linx.Plugin.Common.CodeGeneration.NextResult(\"");
            
            #line 40 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ExecutionPathName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 40 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\tbuildFileInfo(file)\t\r\n\t\t");
            
            #line 42 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 if (LoopResults) { 
            
            #line default
            #line hidden
            this.Write(" ) ");
            
            #line 42 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t);\r\n\r\nvar output = new ");
            
            #line 45 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OutputTypeName));
            
            #line default
            #line hidden
            this.Write("();\r\noutput.");
            
            #line 46 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileListShared.OutputNumberOfFilesName));
            
            #line default
            #line hidden
            this.Write(" = files.Count();\r\n\r\n");
            
            #line 48 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 if (LoopResults) { 
            
            #line default
            #line hidden
            
            #line 49 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ExecutionPathOutputName));
            
            #line default
            #line hidden
            this.Write(" = fileInfos;\r\n");
            
            #line 50 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 } else {
            
            #line default
            #line hidden
            this.Write("output.");
            
            #line 51 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FileListShared.OutputFileInfoName));
            
            #line default
            #line hidden
            this.Write(" = fileInfos.ToList();\r\n");
            
            #line 52 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"
 }
            
            #line default
            #line hidden
            this.Write("\r\nreturn output;\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\Hg\Linx5 Components\Forks\File\Code\File\FileList\FileListX_Gen.tt"

private string _FunctionContextPropertyNameField;

/// <summary>
/// Access the FunctionContextPropertyName parameter of the template.
/// </summary>
private string FunctionContextPropertyName
{
    get
    {
        return this._FunctionContextPropertyNameField;
    }
}

private string _IncludeSubfoldersField;

/// <summary>
/// Access the IncludeSubfolders parameter of the template.
/// </summary>
private string IncludeSubfolders
{
    get
    {
        return this._IncludeSubfoldersField;
    }
}

private string _FolderPathField;

/// <summary>
/// Access the FolderPath parameter of the template.
/// </summary>
private string FolderPath
{
    get
    {
        return this._FolderPathField;
    }
}

private string _SearchPatternField;

/// <summary>
/// Access the SearchPattern parameter of the template.
/// </summary>
private string SearchPattern
{
    get
    {
        return this._SearchPatternField;
    }
}

private bool _LoopResultsField;

/// <summary>
/// Access the LoopResults parameter of the template.
/// </summary>
private bool LoopResults
{
    get
    {
        return this._LoopResultsField;
    }
}

private bool _ReturnFullPathField;

/// <summary>
/// Access the ReturnFullPath parameter of the template.
/// </summary>
private bool ReturnFullPath
{
    get
    {
        return this._ReturnFullPathField;
    }
}

private string _FileInfoTypeNameField;

/// <summary>
/// Access the FileInfoTypeName parameter of the template.
/// </summary>
private string FileInfoTypeName
{
    get
    {
        return this._FileInfoTypeNameField;
    }
}

private string _OutputTypeNameField;

/// <summary>
/// Access the OutputTypeName parameter of the template.
/// </summary>
private string OutputTypeName
{
    get
    {
        return this._OutputTypeNameField;
    }
}

private string _ExecutionPathNameField;

/// <summary>
/// Access the ExecutionPathName parameter of the template.
/// </summary>
private string ExecutionPathName
{
    get
    {
        return this._ExecutionPathNameField;
    }
}

private string _ExecutionPathOutputNameField;

/// <summary>
/// Access the ExecutionPathOutputName parameter of the template.
/// </summary>
private string ExecutionPathOutputName
{
    get
    {
        return this._ExecutionPathOutputNameField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool FunctionContextPropertyNameValueAcquired = false;
if (this.Session.ContainsKey("FunctionContextPropertyName"))
{
    this._FunctionContextPropertyNameField = ((string)(this.Session["FunctionContextPropertyName"]));
    FunctionContextPropertyNameValueAcquired = true;
}
if ((FunctionContextPropertyNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("FunctionContextPropertyName");
    if ((data != null))
    {
        this._FunctionContextPropertyNameField = ((string)(data));
    }
}
bool IncludeSubfoldersValueAcquired = false;
if (this.Session.ContainsKey("IncludeSubfolders"))
{
    this._IncludeSubfoldersField = ((string)(this.Session["IncludeSubfolders"]));
    IncludeSubfoldersValueAcquired = true;
}
if ((IncludeSubfoldersValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("IncludeSubfolders");
    if ((data != null))
    {
        this._IncludeSubfoldersField = ((string)(data));
    }
}
bool FolderPathValueAcquired = false;
if (this.Session.ContainsKey("FolderPath"))
{
    this._FolderPathField = ((string)(this.Session["FolderPath"]));
    FolderPathValueAcquired = true;
}
if ((FolderPathValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("FolderPath");
    if ((data != null))
    {
        this._FolderPathField = ((string)(data));
    }
}
bool SearchPatternValueAcquired = false;
if (this.Session.ContainsKey("SearchPattern"))
{
    this._SearchPatternField = ((string)(this.Session["SearchPattern"]));
    SearchPatternValueAcquired = true;
}
if ((SearchPatternValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("SearchPattern");
    if ((data != null))
    {
        this._SearchPatternField = ((string)(data));
    }
}
bool LoopResultsValueAcquired = false;
if (this.Session.ContainsKey("LoopResults"))
{
    this._LoopResultsField = ((bool)(this.Session["LoopResults"]));
    LoopResultsValueAcquired = true;
}
if ((LoopResultsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("LoopResults");
    if ((data != null))
    {
        this._LoopResultsField = ((bool)(data));
    }
}
bool ReturnFullPathValueAcquired = false;
if (this.Session.ContainsKey("ReturnFullPath"))
{
    this._ReturnFullPathField = ((bool)(this.Session["ReturnFullPath"]));
    ReturnFullPathValueAcquired = true;
}
if ((ReturnFullPathValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ReturnFullPath");
    if ((data != null))
    {
        this._ReturnFullPathField = ((bool)(data));
    }
}
bool FileInfoTypeNameValueAcquired = false;
if (this.Session.ContainsKey("FileInfoTypeName"))
{
    this._FileInfoTypeNameField = ((string)(this.Session["FileInfoTypeName"]));
    FileInfoTypeNameValueAcquired = true;
}
if ((FileInfoTypeNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("FileInfoTypeName");
    if ((data != null))
    {
        this._FileInfoTypeNameField = ((string)(data));
    }
}
bool OutputTypeNameValueAcquired = false;
if (this.Session.ContainsKey("OutputTypeName"))
{
    this._OutputTypeNameField = ((string)(this.Session["OutputTypeName"]));
    OutputTypeNameValueAcquired = true;
}
if ((OutputTypeNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("OutputTypeName");
    if ((data != null))
    {
        this._OutputTypeNameField = ((string)(data));
    }
}
bool ExecutionPathNameValueAcquired = false;
if (this.Session.ContainsKey("ExecutionPathName"))
{
    this._ExecutionPathNameField = ((string)(this.Session["ExecutionPathName"]));
    ExecutionPathNameValueAcquired = true;
}
if ((ExecutionPathNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ExecutionPathName");
    if ((data != null))
    {
        this._ExecutionPathNameField = ((string)(data));
    }
}
bool ExecutionPathOutputNameValueAcquired = false;
if (this.Session.ContainsKey("ExecutionPathOutputName"))
{
    this._ExecutionPathOutputNameField = ((string)(this.Session["ExecutionPathOutputName"]));
    ExecutionPathOutputNameValueAcquired = true;
}
if ((ExecutionPathOutputNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ExecutionPathOutputName");
    if ((data != null))
    {
        this._ExecutionPathOutputNameField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class FileListX_GenBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
