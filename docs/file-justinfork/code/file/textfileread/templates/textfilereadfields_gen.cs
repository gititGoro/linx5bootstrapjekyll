// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Twenty57.Linx.Components.File
{
    using Twenty57.Linx.Components.File.TextFileRead;
    using Twenty57.Linx.Plugin.Common.CodeGeneration;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class TextFileReadFields_Gen : TextFileReadFields_GenBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 16 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"

string lengthList = "";
foreach(var field in fields.FieldList)
	lengthList+= field.Length + ",";
lengthList = lengthList.Substring(0,lengthList.Length-1);

            
            #line default
            #line hidden
            this.Write("\r\nvar fieldParser = new Twenty57.Linx.Components.File.TextFileRead.FieldParser(\r\n" +
                    "\t\t");
            
            #line 24 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.EnumAsString(fields.TextFileType)));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t");
            
            #line 25 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.EnumAsString(fields.Delimiter)));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t");
            
            #line 26 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.EnumAsString(fields.TextQualifier)));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t");
            
            #line 27 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.ToVerbatimString(fields.OtherDelimiter)));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t");
            
            #line 28 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.ToVerbatimString(lengthList)));
            
            #line default
            #line hidden
            this.Write(");\r\nFunc<Twenty57.Linx.Components.File.TextFileRead.TextFileReader.NextString,");
            
            #line 29 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(outputFileContentsType));
            
            #line default
            #line hidden
            this.Write("> parseField = (nextLine)=> \r\n{\r\n\tif(nextLine != null)\r\n\t{\r\n\t\tvar parsedFields = " +
                    "fieldParser.GetValues(nextLine.LineContents);\r\n\t\tvar record = new ");
            
            #line 34 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(outputFileContentsType));
            
            #line default
            #line hidden
            this.Write("();\r\n\t\t");
            
            #line 35 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"

		int index = 0;
		foreach(var field in fields.FieldList) 
		{ 
			if(!field.Skip)
			{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tif(");
            
            #line 41 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(" < parsedFields.Length)\r\n\t\t\t\t{\r\n\t\t\t\t\t");
            
            #line 43 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
 if(field.Type.Is(typeof(DateTime)) && !String.IsNullOrWhiteSpace(field.Format)) {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\trecord.");
            
            #line 44 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(" = DateTime.ParseExact(parsedFields[");
            
            #line 44 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write("], \"");
            
            #line 44 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Format));
            
            #line default
            #line hidden
            this.Write("\", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTi" +
                    "meStyles.None);\r\n\t\t\t\t\t");
            
            #line 45 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
 } else if (field.Type.Is(typeof(decimal)) || (field.Type.Is(typeof(double)))) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\trecord.");
            
            #line 46 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 46 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Type.GetGeneratedType()));
            
            #line default
            #line hidden
            this.Write(".Parse(parsedFields[");
            
            #line 46 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write("], System.Globalization.CultureInfo.InvariantCulture);\r\n\t\t\t\t\t");
            
            #line 47 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t\trecord.");
            
            #line 48 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 48 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Type.GetGeneratedType()));
            
            #line default
            #line hidden
            this.Write(")Convert.ChangeType(parsedFields[");
            
            #line 48 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 48 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
 if (field.Type.Is(typeof(decimal))) { 
            
            #line default
            #line hidden
            this.Write(" .Replace(\'.\',\',\') ");
            
            #line 48 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write(" ], typeof(");
            
            #line 48 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Type.GetGeneratedType()));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t\t\t\t");
            
            #line 49 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t}\r\n\t\t");
            
            #line 51 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
 }
			index++;
		} 
            
            #line default
            #line hidden
            this.Write("\t\treturn record;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nvar fileHandle = (Twen" +
                    "ty57.Linx.Components.File.Common.TextFileHandle)");
            
            #line 62 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(filePathPropertyName));
            
            #line default
            #line hidden
            this.Write(";\r\nfileHandle.LogEvent += message => ");
            
            #line 63 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContextPropertyName));
            
            #line default
            #line hidden
            this.Write(".Log(message);\r\nvar reader = new Twenty57.Linx.Components.File.TextFileRead.TextF" +
                    "ileReader(\r\n\tfileHandle, \r\n\t");
            
            #line 66 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.EnumAsString(readType)));
            
            #line default
            #line hidden
            this.Write(", \r\n\t");
            
            #line 67 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CSharpUtilities.EnumAsString(codePage)));
            
            #line default
            #line hidden
            this.Write(", \r\n\t");
            
            #line 68 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(skipHeaderLines));
            
            #line default
            #line hidden
            this.Write(",\r\n\t");
            
            #line 69 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(skipFooterLines));
            
            #line default
            #line hidden
            this.Write("\r\n\t);\r\nreader.LogEvent += message => ");
            
            #line 71 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContextPropertyName));
            
            #line default
            #line hidden
            this.Write(".Log(message);\r\nreturn reader.Lines().Select(v=>parseField(v)).ToList();\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Projects\Linx\linx5-components\linx5-components-file\Code\File\TextFileRead\Templates\TextFileReadFields_Gen.tt"

private string _functionContextPropertyNameField;

/// <summary>
/// Access the functionContextPropertyName parameter of the template.
/// </summary>
private string functionContextPropertyName
{
    get
    {
        return this._functionContextPropertyNameField;
    }
}

private string _filePathPropertyNameField;

/// <summary>
/// Access the filePathPropertyName parameter of the template.
/// </summary>
private string filePathPropertyName
{
    get
    {
        return this._filePathPropertyNameField;
    }
}

private global::Twenty57.Linx.Components.File.TextFileRead.FileReadOptions _readTypeField;

/// <summary>
/// Access the readType parameter of the template.
/// </summary>
private global::Twenty57.Linx.Components.File.TextFileRead.FileReadOptions readType
{
    get
    {
        return this._readTypeField;
    }
}

private global::Twenty57.Linx.Components.File.Common.TextCodepage _codePageField;

/// <summary>
/// Access the codePage parameter of the template.
/// </summary>
private global::Twenty57.Linx.Components.File.Common.TextCodepage codePage
{
    get
    {
        return this._codePageField;
    }
}

private string _skipHeaderLinesField;

/// <summary>
/// Access the skipHeaderLines parameter of the template.
/// </summary>
private string skipHeaderLines
{
    get
    {
        return this._skipHeaderLinesField;
    }
}

private string _skipFooterLinesField;

/// <summary>
/// Access the skipFooterLines parameter of the template.
/// </summary>
private string skipFooterLines
{
    get
    {
        return this._skipFooterLinesField;
    }
}

private global::Twenty57.Linx.Components.File.TextFileRead.TextFileReaderFields _fieldsField;

/// <summary>
/// Access the fields parameter of the template.
/// </summary>
private global::Twenty57.Linx.Components.File.TextFileRead.TextFileReaderFields fields
{
    get
    {
        return this._fieldsField;
    }
}

private string _outputFileContentsTypeField;

/// <summary>
/// Access the outputFileContentsType parameter of the template.
/// </summary>
private string outputFileContentsType
{
    get
    {
        return this._outputFileContentsTypeField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool functionContextPropertyNameValueAcquired = false;
if (this.Session.ContainsKey("functionContextPropertyName"))
{
    this._functionContextPropertyNameField = ((string)(this.Session["functionContextPropertyName"]));
    functionContextPropertyNameValueAcquired = true;
}
if ((functionContextPropertyNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("functionContextPropertyName");
    if ((data != null))
    {
        this._functionContextPropertyNameField = ((string)(data));
    }
}
bool filePathPropertyNameValueAcquired = false;
if (this.Session.ContainsKey("filePathPropertyName"))
{
    this._filePathPropertyNameField = ((string)(this.Session["filePathPropertyName"]));
    filePathPropertyNameValueAcquired = true;
}
if ((filePathPropertyNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("filePathPropertyName");
    if ((data != null))
    {
        this._filePathPropertyNameField = ((string)(data));
    }
}
bool readTypeValueAcquired = false;
if (this.Session.ContainsKey("readType"))
{
    this._readTypeField = ((global::Twenty57.Linx.Components.File.TextFileRead.FileReadOptions)(this.Session["readType"]));
    readTypeValueAcquired = true;
}
if ((readTypeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("readType");
    if ((data != null))
    {
        this._readTypeField = ((global::Twenty57.Linx.Components.File.TextFileRead.FileReadOptions)(data));
    }
}
bool codePageValueAcquired = false;
if (this.Session.ContainsKey("codePage"))
{
    this._codePageField = ((global::Twenty57.Linx.Components.File.Common.TextCodepage)(this.Session["codePage"]));
    codePageValueAcquired = true;
}
if ((codePageValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("codePage");
    if ((data != null))
    {
        this._codePageField = ((global::Twenty57.Linx.Components.File.Common.TextCodepage)(data));
    }
}
bool skipHeaderLinesValueAcquired = false;
if (this.Session.ContainsKey("skipHeaderLines"))
{
    this._skipHeaderLinesField = ((string)(this.Session["skipHeaderLines"]));
    skipHeaderLinesValueAcquired = true;
}
if ((skipHeaderLinesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("skipHeaderLines");
    if ((data != null))
    {
        this._skipHeaderLinesField = ((string)(data));
    }
}
bool skipFooterLinesValueAcquired = false;
if (this.Session.ContainsKey("skipFooterLines"))
{
    this._skipFooterLinesField = ((string)(this.Session["skipFooterLines"]));
    skipFooterLinesValueAcquired = true;
}
if ((skipFooterLinesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("skipFooterLines");
    if ((data != null))
    {
        this._skipFooterLinesField = ((string)(data));
    }
}
bool fieldsValueAcquired = false;
if (this.Session.ContainsKey("fields"))
{
    this._fieldsField = ((global::Twenty57.Linx.Components.File.TextFileRead.TextFileReaderFields)(this.Session["fields"]));
    fieldsValueAcquired = true;
}
if ((fieldsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("fields");
    if ((data != null))
    {
        this._fieldsField = ((global::Twenty57.Linx.Components.File.TextFileRead.TextFileReaderFields)(data));
    }
}
bool outputFileContentsTypeValueAcquired = false;
if (this.Session.ContainsKey("outputFileContentsType"))
{
    this._outputFileContentsTypeField = ((string)(this.Session["outputFileContentsType"]));
    outputFileContentsTypeValueAcquired = true;
}
if ((outputFileContentsTypeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("outputFileContentsType");
    if ((data != null))
    {
        this._outputFileContentsTypeField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class TextFileReadFields_GenBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
